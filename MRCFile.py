import json
import argparse
import os
import sys
import re

class MRCFile:
    def __init__(self, title: str, author: str, path: str, description: str = 'Generic Description'):
        if path[-1] != '/':
            path += '/'
        path += re.sub(r'\W+', '_', title, flags=re.UNICODE) + '.mrc'
        self.__file = open(path, 'wb+')
        self.__time = 0.0
        self.__write_header(title, description)

    def __del__(self):
        self.__write_line('[END COURSE DATA]')
        self.__file.close()

    def __write_header(self, title : str, description : str):
        self.__write_line('[COURSE HEADER]')
        self.__write_line('VERSION = 2')
        self.__write_line('UNITS = ENGLISH')
        self.__write_line('DESCRIPTION = {}'.format(description))
        self.__write_line('FILE NAME = {}'.format(title))
        self.__write_line('MINUTES PERCENT')
        self.__write_line('[END COURSE HEADER]')
        self.__write_line('[COURSE DATA]')

    def __write_line(self, line: str):
        self.__file.write(str.encode(line + '\n'))

    def add_data(self, time : float, start_itensity : int , end_intensity : int):
        self.__write_line('{:.2f}\t{}'.format(self.__time, start_itensity))
        self.__time += time
        self.__write_line('{:.2f}\t{}'.format(self.__time, end_intensity))


def generate(Input : str, Output : str, WipeFile : bool):
    if not os.path.isfile(Input) or Input[-5:] != '.json':
        print('No File given', file=sys.stderr)
        return -1
    data = {}
    with open(Input) as data_file:
        data = json.load(data_file)
    path = Output
    if Output[-1] != '/':
        path += '/'
    for point in data:  
        d = path + point['creator']
        if not os.path.isdir(d):
            os.makedirs(d)
        if WipeFile:
            if not os.path.isdir(d + '/wipe'):
                os.makedirs(d + '/wipe')
            open('{}/wipe/{}.mrc'.format(d,point['title']), 'wb+').close()
            open('{}/wipe/{}.mrc.plan'.format(d,point['title']), 'wb+').close()
        f = MRCFile(point['title'], point['creator'], d)
        for interval in point['MRC']:
            f.add_data(float(interval[0]), interval[1], interval[2])
    return 0


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        'MRC Parser', 
        description='This generates MRC Files from JSON files generated by'
                    'scrapy spiders'
    )
    parser.add_argument(
        '-I', '--Input',
        required=True, 
        help='JSON file that generated by a scrapy spider'
    )
    parser.add_argument(
        '-O', '--Output',
        required=True,
        help='Path where the MRC Files shall be generated'
    )
    parser.add_argument(
        '--WipeFile', action='store_true', default=False,
        help='Generate empty files to delete workouts from a Wahoo device'
    )
    args = parser.parse_args()    
    generate(args.Input, args.Output, args.WipeFile)